import base64
from PIL import Image
import io
import matplotlib.pyplot as plt
import numpy as np

def calculate_noise(image):
    # Récupère le bruit de l'image en chargeant les pixels
    pixels = image.load()
    r, g, b, a = pixels[0, 0]
    return [r, g, b, a]

def calculate_relative_differences(image1, image2, noise):
    # Calcule les différences relatives entre les deux images en prenant en compte le bruit
    pixels1 = image1.load()
    pixels2 = image2.load()
    width, height = image1.size
    tab_diff_relative = []
    for py in range(height):
        for px in range(width):
            r1, g1, b1, a1 = pixels1[px, py]
            r2, g2, b2, a2 = pixels2[px, py]
            tab_diff_relative.append([r1 - r2 - noise[0]*2, g1 - g2 - noise[1]*2, b1 - b2 - noise[2]*2, a1 - a2 - noise[3]*2])
    return tab_diff_relative

def main():
    data_original =''



    data_canva_def_tab = [""
                          ,"",
    ]
    tab_sound = [[-5,-2,11,5],[24,5,8,24]]


    # Initialise les variables pour stocker les résultats
    tab_tot_diff_relative = []
    moy_noise_by_canva = []
    all_noise = []

    # Parcourt toutes les images avec bruit de Canvas Defender
    for i in range(len(data_canva_def_tab)):
        # Décode les données et charge les images
        decoded_data_canva_def = base64.b64decode(data_canva_def_tab[i])
        decoded_data_data_original = base64.b64decode(data_original)
        image_canva_def = Image.open(io.BytesIO(decoded_data_canva_def))
        image_original = Image.open(io.BytesIO(decoded_data_data_original))

        # Calcule le bruit de l'image avec Canvas Defender et le bruit théorique
        noise_autre = calculate_noise(image_canva_def)
        noise = tab_sound[i]

        # Calcule les différences relatives entre les deux images
        tab_diff_relative = calculate_relative_differences(image_canva_def, image_original, noise)
        tab_tot_diff_relative.append(tab_diff_relative)

        # Stocke les résultats pour les utiliser plus tard
        moy_noise_by_canva.append(noise)
        all_noise.append([noise[j]*2 for j in range(4)])

    # Calcule le pourcentage d'ajout de bruit relatif pour chaque empreinte digitale de Canvas Defender
    percent_noise_added = []
    for actual_i in range(len(tab_tot_diff_relative)):
        total_noise_diff = np.sum(np.abs(tab_tot_diff_relative[actual_i]))
        noise_diff_by_pixel = total_noise_diff / len(tab_tot_diff_relative[actual_i])
        percent_noise_added.append(noise_diff_by_pixel/np.sum(np.abs(all_noise[actual_i]))*100)

    # Affiche les résultats
    print("Pourcentage d'ajout de bruit relatif pour chaque empreinte digitale de Canvas Defender :")
    for i, percent in enumerate(percent_noise_added):
        print(f"Empreinte digitale Canvas Defender {i+1}: {percent:.2f}%")

    # Affiche les graphiques
    fig, axs = plt.subplots(2, 2, figsize=(16, 12))

    # Graphique 1: Moyenne du bruit ajouté par Canvas Defender
    noise_values = [np.mean(moy_noise_by_canva, axis=0)[j] for j in range(4)]
    axs[0, 0].bar(['R', 'G', 'B', 'A'], noise_values, color=['red', 'green', 'blue', 'gray'])
    axs[0, 0].set_title('Moyenne du bruit ajouté par Canvas Defender')
    axs[0, 0].set_xlabel('Canal de couleur')
    axs[0, 0].set_ylabel('Moyenne du bruit')

    # Graphique 2: Moyenne des différences relatives par canal de couleur
    relative_differences = [item for sublist in tab_tot_diff_relative for item in sublist]
    means = [np.mean(np.array(relative_differences)[:, i]) for i in range(4)]
    axs[0, 1].bar(['R', 'G', 'B', 'A'], means, color=['red', 'green', 'blue', 'gray'])
    axs[0, 1].set_title('Moyenne des différences relatives par canal de couleur')
    axs[0, 1].set_xlabel('Canal de couleur')
    axs[0, 1].set_ylabel('Moyenne des différences relatives')
    
    # Graphique 3: Écart-type des différences relatives par canal de couleur
    stds = [np.std(np.array(relative_differences)[:, i]) for i in range(4)]
    axs[1, 0].bar(['R', 'G', 'B', 'A'], stds, color=['red', 'green', 'blue', 'gray'])
    axs[1, 0].set_title('Écart-type des différences relatives par canal de couleur')
    axs[1, 0].set_xlabel('Canal de couleur')
    axs[1, 0].set_ylabel('Écart-type des différences relatives')

    # Graphique 4: Pourcentage d'ajout de bruit relatif pour chaque empreinte digitale de Canvas Defender
    axs[1, 1].bar(range(1, len(percent_noise_added) + 1), percent_noise_added, color='blue')
    axs[1, 1].set_title('Pourcentage d\'ajout de bruit relatif pour chaque empreinte digitale de Canvas Defender')
    axs[1, 1].set_xlabel('Empreinte digitale Canvas Defender')
    axs[1, 1].set_ylabel('Pourcentage d\'ajout de bruit relatif')
    axs[1, 1].set_ylim(0, 110)  # Ajout de cette ligne pour définir l'échelle de l'axe des ordonnées

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()
