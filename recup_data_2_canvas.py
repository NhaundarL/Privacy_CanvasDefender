import base64
from PIL import Image
import io


data_original =''
data_canva_def = ""
noise = [-5,-2,11,5]

decoded_data_canva_def = base64.b64decode(data_original)
decoded_data_data_original = base64.b64decode(data_canva_def)
# Open the image file using Pillow
image_canva_def = Image.open(io.BytesIO(decoded_data_canva_def))
image_original = Image.open(io.BytesIO(decoded_data_data_original))

pixels_canva_def = image_canva_def.load()
pixels_original = image_original.load()
width, height = image_canva_def.size # meme taille pour les deux images


for py in range(height):
    if (py<20):
        for px in range(width):
            if (px<20):
                r, g, b, a = pixels_canva_def[px, py]
                r2, g2, b2, a2 = pixels_original[px, py]
                #print(f'Pixel at ({px}, {py}): RGBA({r-r2-noise[0]}, {g-g2-noise[1]}, {b-b2-noise[2]}, {a-a2-noise[3]})') # pixels_canva_def -pixels_original - bruit
                #print(f'Pixel at ({px}, {py}): RGBA({r-r2}, {g-g2}, {b-b2}, {a-a2})') # Difference entre chaque pixel 
                print(f'Pixel_canva_def at ({px}, {py}): RGBA({r2}, {g2}, {b2}, {a2})') # Pixel que de la FP de Canvas Defender
                print(f'Pixel_original at ({px}, {py}): RGBA({r}, {g}, {b}, {a})') # Pixel que de la FP original

# Chaque donnée est représenté par le vecteur (R,G,B,A)
# (Si pixels_canva_def -pixels_original - bruit == 0) pour tout les pixels => L'attaque est réussi